module Declaration

imports 
  Common
  Expression
  Selector

context-free start-symbols
  Declaration
  BlockDeclaration
  VariableDeclarationFlag

template options
  tokenize: ";()[]"

context-free syntax

  BlockDeclaration.BlockDeclaration = <
  <Selector> {
    <Declaration*>
  }>
  VariableDeclaration.VarDeclaration = <<VAR> : <Exp> <VariableDeclarationFlag*>;>
  
  VariableDeclarationFlag.Global  = <!global>
  VariableDeclarationFlag.Default = <!default>
  
  Declaration = BlockDeclaration
  Declaration = VariableDeclaration
  
  /* 
   * TODO: Property declarations need not be followed by a ; per se, 
   * however this is not true when there are multiple consecutive
   * property declarations. 
   */
  PropertyDeclaration.PropertyDeclaration = <<PROPERTY> : <Exp>;> 
  PropertyDeclaration.NamespacePropertyDeclaration = <
    <PROPERTY>: {
      <PropertyDeclaration*>
    }>

  Declaration = PropertyDeclaration

syntax
  // Using kernel syntax, since layout matters to differentiate between 
  // namespaces and pseudoclasses
  PropertyDeclaration-CF.NamespacePropertyDeclarationExp = 
  PROPERTY-LEX ":" LAYOUT-CF Exp-CF LAYOUT-CF "{"
    LAYOUT?-CF PropertyDeclaration*-CF LAYOUT?-CF
  "}"

context-free priorities
  PropertyDeclaration.NamespacePropertyDeclaration > BlockDeclaration.BlockDeclaration
