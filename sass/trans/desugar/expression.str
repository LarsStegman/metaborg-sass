module desugar/expression

imports 
  src-gen/signatures/Expression-sig

signature
  sorts
    BinOp
    UnOp
  
  constructors
    Add   : BinOp
    Sub   : BinOp
    Mul   : BinOp
    Div   : BinOp
    Mod   : BinOp
    And   : BinOp
    Or    : BinOp
    Eq    : BinOp
    InEq  : BinOp
    Gt    : BinOp
    Gte   : BinOp
    Lt    : BinOp
    Lte   : BinOp

    Not   : UnOp
    
    
    BinExp  : BinOp * Exp * Exp -> Exp
    UnExp   : UnOp * Exp -> Exp
    
rules
  desugar: Add(lhs, rhs)  -> BinExp(Add() , lhs, rhs)
  desugar: Sub(lhs, rhs)  -> BinExp(Sub() , lhs, rhs)
  desugar: Mult(lhs, rhs) -> BinExp(Mul() , lhs, rhs)
  desugar: Div(lhs, rhs)  -> BinExp(Div() , lhs, rhs)
  desugar: Mod(lhs, rhs)  -> BinExp(Mod() , lhs, rhs)
  desugar: And(lhs, rhs)  -> BinExp(And() , lhs, rhs)
  desugar: Or(lhs, rhs)   -> BinExp(Or() , lhs, rhs)
  desugar: Eq(lhs, rhs)   -> BinExp(Eq() , lhs, rhs)
  desugar: InEq(lhs, rhs) -> BinExp(InEq() , lhs, rhs)
  desugar: Gt(lhs, rhs)   -> BinExp(Gt() , lhs, rhs)
  desugar: Gte(lhs, rhs)  -> BinExp(Gte() , lhs, rhs)
  desugar: Lt(lhs, rhs)   -> BinExp(Lt() , lhs, rhs)
  desugar: Lte(lhs, rhs)  -> BinExp(Lte() , lhs, rhs)
  
  desugar: Not(e) -> UnExp(Not(), e)
  
  desugar: HexShort(hex) -> Hex(<explode-string; 
                                 mapconcat(\c -> (2, c)\; copy(id)); 
                                 implode-string> hex)
// 
  