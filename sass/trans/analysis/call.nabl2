module analysis/call

imports
  desugar/declaration
  src-gen/signatures/Declaration-sig

rules
  // TODO: CHECK WHETHER MIXIN IS CSSABLE, i.e. no property declarations at root of mixin
  RootScopeIterative[[ [IncludeMixin(l, args, content) | succ] ^ (avS) ]] :=
    Mixin{l} -> avS
    , Mixin{l} |-> d
    , d ?=A=> fArgS
    , CheckAArgGroup[[ args ^ (avS, fArgS) ]]
    
    , new nextS
    , nextS -G-> avS
    , d ?=G=> finalMixinGS
    , nextS -G-> finalMixinGS    
    , RootScopeIterative[[ succ ^ (nextS) ]]
    .
  ScopeIterative[[ [IncludeMixin(l, args, content) | succ] ^ (avS, gS, finalGS) ]] :=
    Mixin{l} -> avS
    , Mixin{l} |-> d
    , d ?=A=> fArgs
    , CheckAArgGroup[[ args ^ (avS, fArgs) ]]
    
    , d ?=G=> finalMixinGS
    , new nextGS
    , nextGS -G-> finalMixinGS
    , nextGS -G-> gS

    , new nextS
    , nextS ---> avS
    , nextS -G-> nextGS 
    
    , ScopeIterative[[ succ ^ (nextS, nextGS, finalGS) ]]
    .
  
  CheckAArgGroup[[ [] ^ (_, _) ]].
  CheckAArgGroup[[ KeywordAArgGroup(aargs) ^ (s, mixinFArgS) ]] :=
    new callS
    , Map2T(CheckAArg)[[ aargs ^ (s, callS) : _ ]]
    // The non-default fargs should be a subset of the call args.
    , D(mixinFArgS)/Arg subseteq/name D(callS)/Arg | error $[Not all non-default arguments have values yet]
    // The call args should be a subset of all fargs.
    , D(callS)/Arg subseteq/name (D(mixinFArgS)/Arg union D(mixinFArgS)/ArgDefault) | error $[Too many arguments]
    .
  
  CheckAArg[[ KeywordAArg(n, exp) ^ (s, callS) : t ]] :=
    Arg{n} <- callS
    , Arg{n} : t
    , [[ exp ^ (s, _) : t ]]
    .
  
  CheckAArgGroup[[ AArgGroup(aargs) ^ (s, mixinFArgS) ]] := 
    new callS
    , Map2T(CheckAArg) [[ aargs ^ (s, callS) : _ ]]
    // non-default formal ivar <= actual ivar
    , D(mixinFArgS)/IArg subseteq/name D(callS)/IArg | error $[Not all non-default arguments have values yet]
    , D(callS)/IArg subseteq/name (D(mixinFArgS)/IArg union D(mixinFArgS)/IArgDefault) | error $[Too many arguments]
    .

  CheckAArg[[ AArg(i, AArg(exp)) ^ (s, callS) : t ]] :=
    IArg{i} <- callS
    , IArg{i} : t
    , [[ exp ^ (s, _) : t ]]
    .
