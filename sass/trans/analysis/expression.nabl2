module analysis/expression

imports
  src-gen/signatures/Expression-sig
  analysis/sass
  nabl2/api
  
rules
  /*
   * Literals
   */
  [[ String(_) ^ (_) : StringT() ]].
  [[ Number(_, _) ^ (_) : NumberT() ]].
  [[ Hex(_) ^ (_) : ColourT() ]].
  [[ ColourLabel(_) ^ (s) : ColourT() ]].
  [[ Length(v, Unit(u, e)) ^ (s) : LengthT(u, e) ]] := 
    [[ v ^ (s) : NumberT() ]].
  [[ True()  ^ (_) : BoolT() ]].
  [[ False() ^ (_) : BoolT() ]].
  [[ Null()  ^ (_) : NullT() ]].
  [[ Var(id) ^ (s) : ty ]] := 
    Var{id} -> s,
    Var{id} |-> d | error $[Undefined variable [id]] @id,
    d : ty.
  
  /*
   * Math
   */
  // This doesn't work, only "length" expressions will work correctly,
  // not numbers.
  [[ BinExp(Add(), lhs, rhs) ^ (s) : LengthT(u, e) ]] :=
    [[ lhs ^ (s) : LengthT(u, e)]], [[ rhs ^ (s) : LengthT(u, e) ]].
  [[ BinExp(Add(), lhs, rhs) ^ (s) : NumberT() ]] :=
    [[ lhs ^ (s) : NumberT() ]], [[ rhs ^ (s) : NumberT() ]].
  
  [[ BinExp(Sub(), lhs, rhs) ^ (s) : NumberT() ]] :=
    [[ lhs ^ (s) : NumberT() ]], [[ rhs ^ (s) : NumberT() ]].
  [[ BinExp(Sub(), lhs, rhs) ^ (s) : LengthT(u, e) ]] :=
    [[ lhs ^ (s) : LengthT(u, e)]], [[ rhs ^ (s) : LengthT(u, e) ]].
    
  [[ BinExp(Mul(), lhs, rhs) ^ (s) : NumberT() ]] :=
    [[ lhs ^ (s) : NumberT() ]], [[ rhs ^ (s) : NumberT() ]].
  [[ BinExp(Div(), lhs, rhs) ^ (s) : NumberT() ]] :=
    [[ lhs ^ (s) : NumberT() ]], [[ rhs ^ (s) : NumberT() ]].
  [[ BinExp(Mod(), lhs, rhs) ^ (s) : NumberT() ]] :=
    [[ lhs ^ (s) : NumberT() ]], [[ rhs ^ (s) : NumberT() ]]. 
  
  /*
   * Logic 
   */
  [[ BinExp(And(), lhs, rhs) ^ (s) : BoolT() ]] :=
    [[ lhs ^ (s) : BoolT() ]], [[ rhs ^ (s) : BoolT() ]].
  [[ BinExp(Or(), lhs, rhs) ^ (s) : BoolT() ]] :=
    [[ lhs ^ (s) : BoolT() ]], [[ rhs ^ (s) : BoolT() ]].
  [[ UnExp(Not(), e) ^ (s) : BoolT() ]] := [[ e ^ (s) : BoolT() ]].
  
  /*
   * Comparison
   */
  [[ BinExp(Eq(), lhs, rhs) ^ (s) : BoolT() ]] :=
    [[ lhs ^ (s) : t ]], [[ rhs ^ (s) : t ]].
  [[ BinExp(Gt(), lhs, rhs) ^ (s) : BoolT() ]] :=
    [[ lhs ^ (s) : NumberT() ]], [[ rhs ^ (s) : NumberT() ]].
  
  
  