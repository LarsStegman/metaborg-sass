module analysis/expression

imports
  src-gen/signatures/Expression-sig
  analysis/sass
  nabl2/api
  
/*
 * Math
 */
rules
  [[ BinExp(Add(), lhs, rhs) ^ (s) : eTy ]] :=
    [[ lhs ^ (s) : lTy ]], [[ rhs ^ (s) : rTy ]],
    lTy <addable? rTy | error $[Expressions of type [lTy] and [rTy] cannot be added together.],
    eTy is coerce.lub of (lTy, rTy).
  
//  [[ BinExp(Sub(), lhs, rhs) ^ (s) : NumberT() ]] :=
//    [[ lhs ^ (s) : NumberT() ]], [[ rhs ^ (s) : NumberT() ]].
//  [[ BinExp(Sub(), lhs, rhs) ^ (s) : LengthT(u, e) ]] :=
//    [[ lhs ^ (s) : LengthT(u, e)]], [[ rhs ^ (s) : LengthT(u, e) ]].
//    
//  [[ BinExp(Mul(), lhs, rhs) ^ (s) : NumberT() ]] :=
//    [[ lhs ^ (s) : NumberT() ]], [[ rhs ^ (s) : NumberT() ]].
//  [[ BinExp(Div(), lhs, rhs) ^ (s) : NumberT() ]] :=
//    [[ lhs ^ (s) : NumberT() ]], [[ rhs ^ (s) : NumberT() ]].
//  [[ BinExp(Mod(), lhs, rhs) ^ (s) : NumberT() ]] :=
//    [[ lhs ^ (s) : NumberT() ]], [[ rhs ^ (s) : NumberT() ]]. 

/*
 * Logic 
 */
rules
  [[ BinExp(And(), lhs, rhs) ^ (s) : BoolT() ]] :=
    [[ lhs ^ (s) : lTy ]], [[ rhs ^ (s) : rTy ]],
    lTy <coerce? BoolT(),
    rTy <coerce? BoolT().
  [[ BinExp(Or(), lhs, rhs) ^ (s) : BoolT() ]] :=
    [[ lhs ^ (s) : lTy ]], [[ rhs ^ (s) : rTy ]],
    lTy <coerce? BoolT(),
    rTy <coerce? BoolT().
  [[ UnExp(Not(), e) ^ (s) : BoolT() ]] := 
    [[ e ^ (s) : ty ]],
    ty <coerce? BoolT().
  
/*
 * Comparison
 */
rules
  [[ BinExp(Eq(), lhs, rhs) ^ (s) : BoolT() ]] :=
    [[ lhs ^ (s) : t ]], [[ rhs ^ (s) : t ]]. // TODO: Fix, can also happen for int and float
  [[ BinExp(Gt(), lhs, rhs) ^ (s) : BoolT() ]] :=
    [[ lhs ^ (s) : lTy ]], [[ rhs ^ (s) : rTy ]],
    lTy <coerce? FloatT(),
    rTy <coerce? FloatT().
  
  
  