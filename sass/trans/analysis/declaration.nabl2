module analysis/declaration

imports
  analysis/sass

rules

  /*
   * Anything defined within the scope of this block is not available 
   * outside it, modulo global variables.
   */
  RootScopeIterative[[ [BlockDeclaration(selec, decs) | succ] ^ (avS) ]] :=
    new blockS, 
    blockS ---> avS,
    new finalBlockGS,
    ScopeIterative[[ decs ^ (blockS, avS, finalBlockGS) ]],
    RootScopeIterative[[ succ ^ (finalBlockGS) ]]. 
  ScopeIterative[[ [BlockDeclaration(selec, decs) | succ] ^ (avS, gS, finalGS) ]] :=
    new blockS,
    blockS ---> avS,
    new finalBlockGS,
    ScopeIterative[[ decs ^ (blockS, gS, finalBlockGS) ]],
    
    new nextS,
    nextS ---> avS,
    nextS -G-> finalBlockGS,
    ScopeIterative[[ succ ^ (nextS, finalBlockGS, finalGS) ]].


  // This is exactly the same for block declaration, probably needs some abstraction...
  ScopeIterative[[ [NamespacePropertyDeclaration(_, decs) | succ] ^ (avS, gS, fGS) ]] :=
    new nS,
    nS ---> avS,
    new finalNSGS,
    ScopeIterative[[ decs ^ (nS, gS, finalNSGS) ]],
    
    new nextS,
    nextS ---> avS,
    nextS -G-> finalNSGS,
    ScopeIterative[[ succ ^ (nextS, finalNSGS, fGS) ]].


  ScopeIterative[[ [PropertyDeclaration(prop, e) | succ] ^ (avS, gS, fGS) ]] :=
    [[ e ^ (avS) : eT ]],
    cssET is typeForCSSExport of eT | error $[Expression of type [eT] cannot be assigned to [prop].] @e,
    cssET <cssable? CSSAble()       | error $[Expression of type [eT] cannot be assigned to [prop].] @e,
    ScopeIterative[[ succ ^ (avS, gS, fGS) ]].


  RootScopeIterative[[ [vd@VarDeclaration(var, e, _) | succ] ^ (avS) ]] :=
    new nextS, 
    nextS -G-> avS,
    
    DeclareVar[[ vd ^ (avS, nextS) ]],
    RootScopeIterative[[ succ ^ (nextS) ]].
  ScopeIterative[[ [vd@VarDeclaration(var, e, _) | succ] ^ (avS, gS, fGS) ]] :=
    new nextS, 
    nextS ---> avS,
    
    DeclareVar[[ vd ^ (avS, nextS) ]],
    ScopeIterative[[ succ ^ (nextS, gS, fGS) ]].


  RootScopeIterative[[ [gvd@GlobalVarDeclaration(var, e, f) | succ] ^ (avS) ]] :=
    new s,
    s -G-> avS,
    
    DeclareVar[[ gvd ^ (avS, s) ]],
    RootScopeIterative[[ succ ^ (s) ]].
  ScopeIterative[[ [gvd@GlobalVarDeclaration(var, e, f) | succ] ^ (avS, gS, fGS) ]] :=
    new globalS,  globalS -G-> gS,
    new s,        s ---> avS,
    s -G-> globalS,
    
    DeclareVar[[ gvd ^ (avS, globalS) ]],
    ScopeIterative[[ succ ^ (s, globalS, fGS) ]].


  DeclareVar[[ VarDeclaration(var, e, _) ^ (avS, decS) ]] :=
    [[ e ^ (avS) : t ]],
    Var{var} <- decS,
    Var{var} : t,
    Var{var}.e := e.
  DeclareVar[[ GlobalVarDeclaration(var, e, _) ^ (avS, gS) ]] :=
    [[ e ^ (avS) : t ]],
    Var{var} <- gS,
    Var{var} : t,
    Var{var}.e := e.
