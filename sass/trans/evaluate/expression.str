module evaluate/expression

imports
  nabl2/api
  nabl2shared

imports
  evaluate/evaluate
  evaluate/number
  src-gen/signatures/Expression-sig
  desugar/-
  analysis/sass

strategies
  extract: (l, r) -> (<extr> l, <extr> r)
  extract: Length(n, _) -> <extr> n
  extract: Int(f) -> <string-to-real> f
  extract: Float(f) -> <string-to-real> f
  
  extr = try(extract)
  evaluate-exp = try(evaluate-e)

  apply-bin(f) = extr; f; intl-float

  wrap-num: (IntT(),   v) -> Int(v)
  wrap-num: (FloatT(), v) -> Float(v)
  wrap-num: (LengthT(u), v) -> Length(v, u)
  
rules

  evaluate-e: VarRef(x) -> e with
    a       := <nabl2-get-ast-analysis>;
    ref-occ := <nabl2-mk-occurrence(|"Var")> x;
    dec-occ := <nabl2-get-resolved-name(|a); Fst> ref-occ;
    vExp    := <nabl2-get-property(|a, "e")> dec-occ;
    e       := <evaluate> vExp

  // Compound expressions
  
  // Math
  evaluate-e: e@BinExp(Add(), lhs, rhs) -> r with 
    a   := <nabl2-get-ast-analysis>;
    eT  := <nabl2-get-ast-type(|a)> e;
    v   := <apply-bin(addr)> (lhs, rhs);
    r   := <wrap-num> (eT, v)
  evaluate-e: e@BinExp(Sub(), lhs, rhs) -> r with 
    a   := <nabl2-get-ast-analysis>;
    eT  := <nabl2-get-ast-type(|a)> e;
    v   := <apply-bin(subtr)> (lhs, rhs);
    r   := <wrap-num> (eT, v)
  evaluate-e: e@BinExp(Mul(), lhs, rhs) -> r with 
    a   := <nabl2-get-ast-analysis>;
    eT  := <nabl2-get-ast-type(|a)> e;
    v   := <apply-bin(mulr)> (lhs, rhs);
    r   := <wrap-num> (eT, v)
  evaluate-e: e@BinExp(Div(), lhs, rhs) -> r with 
    a   := <nabl2-get-ast-analysis>;
    eT  := <nabl2-get-ast-type(|a)> e;
    v   := <apply-bin(divr)> (lhs, rhs);
    r   := <wrap-num> (eT, v)
  evaluate-e: e@BinExp(Mod(), lhs, rhs) -> r with 
    a   := <nabl2-get-ast-analysis>;
    eT  := <nabl2-get-ast-type(|a)> e;
    v   := <apply-bin(modr)> (lhs, rhs);
    r   := <wrap-num> (eT, v)
  
  // Logic
  evaluate-e: BinExp(And(), lhs, rhs) -> 
    <?(True(), True()) < !True() + !False()> (lhs, rhs)
  evaluate-e: BinExp(Or(), lhs, rhs) -> 
    <?(True(), _) < !True() + (?(_, True()) < !True() + !False())> (lhs, rhs)
  evaluate-e: UnExp(Not(), e) -> <?True() < !False() + !True()> e
  
  // Comparison
  evaluate-e: BinExp(Eq(), lhs, rhs) -> 
    <?(e, e) < !True() + !False()> (<strip-annos> lhs, <strip-annos> rhs)
  evaluate-e: BinExp(Gt(), lhs, rhs) -> <extr; gtr < !True() + !False()> (lhs, rhs) 
