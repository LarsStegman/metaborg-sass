module evaluate/call

imports
  src-gen/signatures/Declaration-sig

imports
  evaluate/interpret/-
  evaluate/expression
  desugar/declaration

rules
  interp-item(|store): IncludeMixin(l, aargs, content) -> (evalBody, globalStoreFromBody, globalStoreFromBody) with
    mixinDef := <get-mixin(|store)> l
    ; <Mixin(?defName, ?fargs, ?fargsDef, ?body, ?env)> mixinDef
    
    // Build the store of default argument expressions
    ; defaultArgTuples := <map(\FArg(i, FArgDefault(n, e)) -> (n, e)\)> fargsDef
    ; defaultArgStore := <create-store-with-vars> defaultArgTuples    
    
    // Build the store of aarg values
    ; aargCallStore := <build-call-args-store> (aargs, <conc> (fargs, fargsDef))
    ; callStore := <extend-store(|defaultArgStore)> aargCallStore
    
    ; callEnv := <extend-store(|env)> callStore
    ; emptyS := <create-store> ()
    ; (evalBody, globalStoreFromBody) := <interpret-items(|callEnv)> body

  build-call-args-store: (KeywordAArgGroup(aargs), _)
    -> <map(\KeywordAArg(n, e) -> (n, e)\); create-store-with-vars> aargs
  build-call-args-store: (AArgGroup(aargs), fargs) -> store
    with
      nameValueTuples := <rzip(\(FArg(_, f), AArg(_, AArg(e))) -> (n, e) 
                              with n := <extract-farg-name> f\)> (fargs, aargs)
      ; store := <create-store-with-vars> nameValueTuples

  extract-farg-name: FArg(n) -> n
  extract-farg-name: FArgDefault(n, _) -> n
